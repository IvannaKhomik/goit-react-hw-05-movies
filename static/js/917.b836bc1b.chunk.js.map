{"version":3,"file":"static/js/917.b836bc1b.chunk.js","mappings":"mOAEaA,EAAcC,EAAAA,QAAAA,GAAH,sBACXC,EAAaD,EAAAA,QAAAA,EAAH,sB,SCDVE,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACrC,OACE,iCACE,UAACL,EAAD,sBAAsBI,MACtB,SAACF,EAAD,UAAaG,MAGlB,ECPYC,EAAaL,EAAAA,QAAAA,GAAH,yDAEZ,qBAAGM,MAAkBC,QAArB,IAGEC,EAAiBR,EAAAA,QAAAA,GAAH,4EAGhB,qBAAGM,MAAkBG,UAArB,ICoBX,EAzB8B,WAC5B,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,GAAgBF,EAAS,YAAzDG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,OAE7B,GAAe,aAAXA,EACF,OAAO,uBAAID,EAAME,UAEnB,GAAe,aAAXD,EAAuB,CACzB,IAAQE,EAAYJ,EAAZI,QAGR,OAFqC,IAAnBA,EAAQC,QAGxB,SAACV,EAAD,wDAEA,SAACH,EAAD,UACGY,EAAQE,KAAI,YAAsC,IAAnCC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QAC1BnB,EAAakB,EAAblB,SACR,OAAO,SAACD,EAAD,CAAqBC,SAAUA,EAAUC,KAAMkB,GAA9BF,EACzB,KAGN,CACF,C,oFCxBYR,EAAkB,SAACF,EAASa,GACvC,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOX,EAAP,KAAqBY,EAArB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOV,EAAP,KAAcY,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOT,EAAP,KAAeY,EAAf,KAmBA,OALAC,EAAAA,EAAAA,YAAU,WAZO,IAACR,EAAIS,EAapBF,EAAU,WAbMP,EAcPV,EAdWmB,EAcFN,GAblBO,EAAAA,EAAAA,IAAgBV,EAAIS,GACjBE,MAAK,SAAAC,GACJP,EAAgBO,GAChBL,EAAU,WACX,IACAM,OAAM,SAAAnB,GACLY,EAASZ,GACTa,EAAU,WACX,GAMJ,GAAE,CAACjB,EAASa,IAEN,CAAEV,aAAAA,EAAcC,MAAAA,EAAOC,OAAAA,EAC/B,C,sGC3BD,IAAMmB,EACK,mCADLA,EAEC,+BAFDA,EAGS,WAGR,SAASC,IACd,OAAOC,MAAM,GAAD,OACPF,EADO,YACKA,EADL,4BACyCA,IACnDH,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,uDAEH,GACF,CAEM,SAASZ,EAAgBpB,GAA8B,IAArBiC,EAAoB,uDAAJ,GACvD,OAAOP,MAAM,GAAD,OACPF,EADO,kBACWxB,GADX,OACqBiC,EADrB,oBAC8CT,EAD9C,oBAEVH,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,uDAEH,GACF,CAEM,SAASE,EAAiBC,GAC/B,OAAOT,MAAM,GAAD,OACPF,EADO,iCAC0BA,EAD1B,kBACgDW,EADhD,+CAEVd,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,uDAEH,GACF,C","sources":["components/ReviewsDetails/ReviewItem/ReviewItem.styled.js","components/ReviewsDetails/ReviewItem/ReviewItem.jsx","components/ReviewsDetails/ReviewsDetails.styled.js","components/ReviewsDetails/ReviewsDetails.jsx","hooks/useKeyForSearch.js","requests/getApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewTitle = styled.h4``;\nexport const ReviewDesc = styled.p``;\n","import { ReviewDesc, ReviewTitle } from './ReviewItem.styled';\n\nexport const ReviewItem = ({ username, desc }) => {\n  return (\n    <>\n      <ReviewTitle>Author: {username}</ReviewTitle>\n      <ReviewDesc>{desc}</ReviewDesc>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  padding: 24px;\n  color: ${({ theme }) => theme.darkGrey};\n`;\n\nexport const ReviewNotFound = styled.h3`\n  padding: 24px;\n  margin: 0 auto;\n  color: ${({ theme }) => theme.errorColor};\n`;\n","import { useKeyForSearch } from 'hooks/useKeyForSearch';\nimport { useParams } from 'react-router-dom';\nimport { ReviewItem } from './ReviewItem';\nimport { ReviewList, ReviewNotFound } from './ReviewsDetails.styled';\n\nexport const ReviewsDetails = () => {\n  const { movieId } = useParams();\n\n  const { movieDetails, error, status } = useKeyForSearch(movieId, '/reviews');\n\n  if (status === 'rejected') {\n    return <p>{error.message}</p>;\n  }\n  if (status === 'resolved') {\n    const { results } = movieDetails;\n    const noResults = results.length === 0;\n\n    return noResults ? (\n      <ReviewNotFound>We don't have any reviews for this movie</ReviewNotFound>\n    ) : (\n      <ReviewList>\n        {results.map(({ id, author_details, content }) => {\n          const { username } = author_details;\n          return <ReviewItem key={id} username={username} desc={content} />;\n        })}\n      </ReviewList>\n    );\n  }\n};\n\nexport default ReviewsDetails;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { getMovieDetails } from 'requests/getApi';\n\nexport const useKeyForSearch = (movieId, keySearch) => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n\n  const getMovie = (id, key) => {\n    getMovieDetails(id, key)\n      .then(res => {\n        setMovieDetails(res);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  };\n\n  useEffect(() => {\n    setStatus('pending');\n    getMovie(movieId, keySearch);\n  }, [movieId, keySearch]);\n\n  return { movieDetails, error, status };\n};\n","const data = {\n  API_KEY: '068c5b7ddc8b61cb20780a285eccefd7',\n  URL: 'https://api.themoviedb.org/3',\n  trendingUrl: 'trending',\n};\n\nexport function getTrendingMovies() {\n  return fetch(\n    `${data.URL}/${data.trendingUrl}/all/day?api_key=${data.API_KEY}`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`The page you were trying to reach couldn't be found`)\n    );\n  });\n}\n\nexport function getMovieDetails(movieId, searchDetails = '') {\n  return fetch(\n    `${data.URL}/movie/${movieId}${searchDetails}?api_key=${data.API_KEY}&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`The page you were trying to reach couldn't be found`)\n    );\n  });\n}\n\nexport function getMoviesByQuery(query) {\n  return fetch(\n    `${data.URL}/search/movie?api_key=${data.API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`The page you were trying to reach couldn't be found`)\n    );\n  });\n}\n"],"names":["ReviewTitle","styled","ReviewDesc","ReviewItem","username","desc","ReviewList","theme","darkGrey","ReviewNotFound","errorColor","movieId","useParams","useKeyForSearch","movieDetails","error","status","message","results","length","map","id","author_details","content","keySearch","useState","setMovieDetails","setError","setStatus","useEffect","key","getMovieDetails","then","res","catch","data","getTrendingMovies","fetch","response","ok","json","Promise","reject","Error","searchDetails","getMoviesByQuery","query"],"sourceRoot":""}