{"version":3,"file":"static/js/195.7d01674b.chunk.js","mappings":"qNAEaA,EAAWC,EAAAA,QAAAA,GAAH,sJASRC,EAAYD,EAAAA,QAAAA,IAAH,4EAMTE,EAAYF,EAAAA,QAAAA,GAAH,8DAEX,qBAAGG,MAAkBC,QAArB,IAGEC,EAAWL,EAAAA,QAAAA,EAAH,sB,kBCnBRM,EAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrCC,EAAW,mCAAqCF,EACtD,OACE,UAACT,EAAD,YACE,SAACE,EAAD,CAAWU,IAAKH,EAAQE,EAAWE,EAAYC,IAAKJ,KACpD,SAACP,EAAD,UAAYO,KACZ,UAACJ,EAAD,yBAAsBE,OAG3B,E,kBCVYO,EAAWd,EAAAA,QAAAA,GAAH,qJASRe,EAAef,EAAAA,QAAAA,GAAH,uCACd,qBAAGG,MAAkBa,UAArB,ICuBX,EA9BoB,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,GAAgBF,EAAS,YAAzDG,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,OAE7B,GAAe,aAAXA,EACF,OAAO,SAACP,EAAD,UAAeM,EAAME,UAE9B,GAAe,aAAXD,EAAuB,CACzB,IAAQE,EAASJ,EAATI,KAER,OACE,+BACE,SAACV,EAAD,UACGU,EAAKC,KAAI,YAA0D,IAAvDC,EAAsD,EAAtDA,QAASnB,EAA6C,EAA7CA,UAAWoB,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,cAC7C,OACE,SAACtB,EAAD,CAEEC,UAAWA,EACXC,MAAOmB,EACPlB,KAAMmB,GAHDF,EAMV,OAIR,CACF,C,oFC7BYP,EAAkB,SAACF,EAASY,GACvC,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOV,EAAP,KAAqBW,EAArB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOT,EAAP,KAAcW,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOR,EAAP,KAAeW,EAAf,KAmBA,OALAC,EAAAA,EAAAA,YAAU,WAZO,IAACC,EAAIC,EAapBH,EAAU,WAbME,EAcPlB,EAdWmB,EAcFP,GAblBQ,EAAAA,EAAAA,IAAgBF,EAAIC,GACjBE,MAAK,SAAAC,GACJR,EAAgBQ,GAChBN,EAAU,WACX,IACAO,OAAM,SAAAnB,GACLW,EAASX,GACTY,EAAU,WACX,GAMJ,GAAE,CAAChB,EAASY,IAEN,CAAET,aAAAA,EAAcC,MAAAA,EAAOC,OAAAA,EAC/B,C,sGC3BD,IAAMmB,EACK,mCADLA,EAEC,+BAFDA,EAGS,WAGR,SAASC,IACd,OAAOC,MAAM,GAAD,OACPF,EADO,YACKA,EADL,4BACyCA,IACnDH,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,uDAEH,GACF,CAEM,SAASZ,EAAgBpB,GAA8B,IAArBiC,EAAoB,uDAAJ,GACvD,OAAOP,MAAM,GAAD,OACPF,EADO,kBACWxB,GADX,OACqBiC,EADrB,oBAC8CT,EAD9C,oBAEVH,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,uDAEH,GACF,CAEM,SAASE,EAAiBC,GAC/B,OAAOT,MAAM,GAAD,OACPF,EADO,iCAC0BA,EAD1B,kBACgDW,EADhD,+CAEVd,MAAK,SAAAM,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OACb,IAAIC,MAAJ,uDAEH,GACF,C","sources":["components/CastDetails/CastCard/CastCard.styled.js","components/CastDetails/CastCard/CastCard.jsx","components/CastDetails/CastDetails.styled.js","components/CastDetails/CastDetails.jsx","hooks/useKeyForSearch.js","requests/getApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastItem = styled.li`\n  width: calc((100% - 32px * 3 - 48px) / 4);\n  margin-bottom: 12px;\n\n  &:not(:last-child) {\n    margin-right: 32px;\n  }\n`;\n\nexport const CastImage = styled.img`\n  width: 100%;\n  height: auto;\n  display: block;\n`;\n\nexport const CastTitle = styled.h4`\n  margin-bottom: 4px;\n  color: ${({ theme }) => theme.darkGrey};\n`;\n\nexport const CastDesc = styled.p``;\n","import { CastImage, CastItem, CastDesc, CastTitle } from './CastCard.styled';\nimport defaultImg from '../../../img/NoFound.jpg';\n\nexport const CastCard = ({ character, image, name }) => {\n  const fullPath = 'https://image.tmdb.org/t/p/w500/' + image;\n  return (\n    <CastItem>\n      <CastImage src={image ? fullPath : defaultImg} alt={name} />\n      <CastTitle>{name}</CastTitle>\n      <CastDesc>Character: {character}</CastDesc>\n    </CastItem>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  padding: 24px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  list-style: none;\n  font-size: 14px;\n`;\n\nexport const ErrorMessage = styled.h2`\n  color: ${({ theme }) => theme.errorColor};\n`;\n","import { CastCard } from './CastCard';\nimport { useKeyForSearch } from 'hooks/useKeyForSearch';\nimport { useParams } from 'react-router-dom';\nimport { CastList, ErrorMessage } from './CastDetails.styled';\n\nconst CastDetails = () => {\n  const { movieId } = useParams();\n\n  const { movieDetails, error, status } = useKeyForSearch(movieId, '/credits');\n\n  if (status === 'rejected') {\n    return <ErrorMessage>{error.message}</ErrorMessage>;\n  }\n  if (status === 'resolved') {\n    const { cast } = movieDetails;\n\n    return (\n      <>\n        <CastList>\n          {cast.map(({ cast_id, character, profile_path, original_name }) => {\n            return (\n              <CastCard\n                key={cast_id}\n                character={character}\n                image={profile_path}\n                name={original_name}\n              />\n            );\n          })}\n        </CastList>\n      </>\n    );\n  }\n};\n\nexport default CastDetails;\n","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport { getMovieDetails } from 'requests/getApi';\n\nexport const useKeyForSearch = (movieId, keySearch) => {\n  const [movieDetails, setMovieDetails] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState('');\n\n  const getMovie = (id, key) => {\n    getMovieDetails(id, key)\n      .then(res => {\n        setMovieDetails(res);\n        setStatus('resolved');\n      })\n      .catch(error => {\n        setError(error);\n        setStatus('rejected');\n      });\n  };\n\n  useEffect(() => {\n    setStatus('pending');\n    getMovie(movieId, keySearch);\n  }, [movieId, keySearch]);\n\n  return { movieDetails, error, status };\n};\n","const data = {\n  API_KEY: '068c5b7ddc8b61cb20780a285eccefd7',\n  URL: 'https://api.themoviedb.org/3',\n  trendingUrl: 'trending',\n};\n\nexport function getTrendingMovies() {\n  return fetch(\n    `${data.URL}/${data.trendingUrl}/all/day?api_key=${data.API_KEY}`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`The page you were trying to reach couldn't be found`)\n    );\n  });\n}\n\nexport function getMovieDetails(movieId, searchDetails = '') {\n  return fetch(\n    `${data.URL}/movie/${movieId}${searchDetails}?api_key=${data.API_KEY}&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`The page you were trying to reach couldn't be found`)\n    );\n  });\n}\n\nexport function getMoviesByQuery(query) {\n  return fetch(\n    `${data.URL}/search/movie?api_key=${data.API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(\n      new Error(`The page you were trying to reach couldn't be found`)\n    );\n  });\n}\n"],"names":["CastItem","styled","CastImage","CastTitle","theme","darkGrey","CastDesc","CastCard","character","image","name","fullPath","src","defaultImg","alt","CastList","ErrorMessage","errorColor","movieId","useParams","useKeyForSearch","movieDetails","error","status","message","cast","map","cast_id","profile_path","original_name","keySearch","useState","setMovieDetails","setError","setStatus","useEffect","id","key","getMovieDetails","then","res","catch","data","getTrendingMovies","fetch","response","ok","json","Promise","reject","Error","searchDetails","getMoviesByQuery","query"],"sourceRoot":""}